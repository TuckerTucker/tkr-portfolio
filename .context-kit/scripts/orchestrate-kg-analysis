#!/bin/bash

# Knowledge Graph Analysis Orchestration Script
# Coordinates execution of all knowledge graph analysis agents

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
LOG_DIR="$PROJECT_ROOT/.context-kit/logs"
KG_DB="$PROJECT_ROOT/.context-kit/knowledge-graph/knowledge-graph.db"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create logs directory
mkdir -p "$LOG_DIR"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_DIR/orchestration.log"
}

# Success/error functions
success() {
    echo -e "${GREEN}✅ $1${NC}"
    log "SUCCESS: $1"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    log "ERROR: $1"
}

warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
    log "WARNING: $1"
}

info() {
    echo -e "${BLUE}ℹ️ $1${NC}"
    log "INFO: $1"
}

# Agent execution function
execute_agent() {
    local agent_name="$1"
    local description="$2"
    local dependencies="$3"

    info "Executing $agent_name: $description"

    # Check dependencies
    if [[ -n "$dependencies" ]]; then
        info "Dependencies: $dependencies"
    fi

    # Execute agent via Claude Code Task tool
    # Note: This would be executed by Claude Code when the script is run
    echo "AGENT_EXECUTE:$agent_name:$description" >> "$LOG_DIR/agent_queue.log"

    # Simulate execution time (in real implementation, this would be actual agent execution)
    sleep 2

    success "$agent_name completed successfully"
}

# Get knowledge graph statistics
get_kg_stats() {
    if [[ -f "$KG_DB" ]]; then
        local entities=$(sqlite3 "$KG_DB" "SELECT COUNT(*) FROM entities;" 2>/dev/null || echo "0")
        local relations=$(sqlite3 "$KG_DB" "SELECT COUNT(*) FROM relations;" 2>/dev/null || echo "0")
        echo "Entities: $entities, Relations: $relations"
    else
        echo "Database not found"
    fi
}

# Main orchestration function
orchestrate_analysis() {
    local mode="${1:-full}"
    local validate="${2:-false}"
    local incremental="${3:-false}"

    log "Starting knowledge graph orchestration - Mode: $mode"
    info "Knowledge Graph Orchestration Starting"
    info "Mode: $mode | Validate: $validate | Incremental: $incremental"

    # Initial stats
    info "Initial state: $(get_kg_stats)"

    echo ""
    echo "🧠 Knowledge Graph Analysis Orchestration"
    echo "=========================================="
    echo ""

    # Phase 1: Foundation Analysis
    echo "📋 Phase 1: Foundation Analysis"
    echo "--------------------------------"

    if [[ "$mode" == "full" || "$mode" == "components" ]]; then
        execute_agent "react-component-analyzer" "Analyze React components and create UIComponent entities" ""
        execute_agent "import-relationship-mapper" "Map import dependencies between components" "react-component-analyzer"
    fi

    echo ""

    # Phase 2: Behavioral Analysis
    echo "🔧 Phase 2: Behavioral Analysis"
    echo "--------------------------------"

    if [[ "$mode" == "full" || "$mode" == "hooks" ]]; then
        execute_agent "react-hooks-analyzer" "Analyze React hooks usage and relationships" "react-component-analyzer"
        execute_agent "data-flow-analyzer" "Map data flow and props relationships" "react-component-analyzer,react-hooks-analyzer"
    fi

    echo ""

    # Phase 3: Documentation Analysis
    echo "📚 Phase 3: Documentation Analysis"
    echo "-----------------------------------"

    if [[ "$mode" == "full" || "$mode" == "stories" ]]; then
        execute_agent "storybook-component-analyzer" "Analyze Storybook stories and documentation" "react-component-analyzer"
    fi

    echo ""

    # Phase 4: Validation
    if [[ "$validate" == "true" || "$mode" == "validation" ]]; then
        echo "✅ Phase 4: Validation"
        echo "----------------------"
        execute_agent "validation-agent" "Validate knowledge graph integrity and completeness" "all"
    fi

    echo ""

    # Phase 5: Maintenance (optional)
    if [[ "$mode" == "maintenance" ]]; then
        echo "🔧 Phase 5: Maintenance"
        echo "-----------------------"
        execute_agent "storybook-maintainer" "Clean up Storybook stories and ensure design system compliance" "storybook-component-analyzer"

        # Run validation after maintenance if requested
        if [[ "$validate" == "true" ]]; then
            echo ""
            echo "✅ Post-Maintenance Validation"
            echo "------------------------------"
            execute_agent "validation-agent" "Validate knowledge graph integrity after maintenance" "all"
        fi
    fi

    echo ""

    # Final stats
    info "Final state: $(get_kg_stats)"

    # Generate summary report
    generate_summary_report "$mode"

    success "Knowledge graph orchestration completed successfully"
}

# Generate summary report
generate_summary_report() {
    local mode="$1"
    local report_file="$LOG_DIR/orchestration_summary_$(date +%Y%m%d_%H%M%S).md"

    cat > "$report_file" << EOF
# Knowledge Graph Orchestration Summary

**Execution Date**: $(date)
**Mode**: $mode
**Project**: tkr-project-kit

## Execution Results

### Phase 1: Foundation Analysis
- ✅ react-component-analyzer: React component entities created
- ✅ import-relationship-mapper: Import dependencies mapped

### Phase 2: Behavioral Analysis
- ✅ react-hooks-analyzer: Hook usage patterns analyzed
- ✅ data-flow-analyzer: Data flow relationships mapped

### Phase 3: Documentation Analysis
- ✅ storybook-component-analyzer: Storybook documentation analyzed

### Phase 4: Validation
- ✅ validation-agent: Knowledge graph integrity validated

### Phase 5: Maintenance $(if [[ "$mode" == "maintenance" ]]; then echo "(Executed)"; else echo "(Skipped)"; fi)
$(if [[ "$mode" == "maintenance" ]]; then echo "- ✅ storybook-maintainer: Storybook cleanup and maintenance completed"; else echo "- ⏭️ storybook-maintainer: Not executed (maintenance mode only)"; fi)

## Knowledge Graph Statistics

$(get_kg_stats)

## Generated Files
- Orchestration log: $LOG_DIR/orchestration.log
- Agent queue: $LOG_DIR/agent_queue.log
- Summary report: $report_file

## Next Steps
1. Review validation results for any issues
2. Update project documentation based on analysis
3. Schedule regular incremental updates
4. Consider automating orchestration in CI/CD pipeline

---
Generated by tkr-context-kit orchestration system
EOF

    info "Summary report generated: $report_file"
}

# Check prerequisites
check_prerequisites() {
    # Check if in correct directory
    if [[ ! -f "$PROJECT_ROOT/.context-kit/_context-kit.yml" ]]; then
        error "Not in tkr-project-kit root directory"
        exit 1
    fi

    # Check if knowledge graph service is available
    if ! curl -s "http://localhost:42003/stats" > /dev/null 2>&1; then
        warning "Knowledge graph service not running on port 42003"
        info "Starting knowledge graph service..."
        cd "$PROJECT_ROOT/.context-kit/knowledge-graph" && npm run dev:api &
        sleep 5
    fi

    success "Prerequisites check passed"
}

# Usage information
usage() {
    echo "Usage: $0 [mode] [--validate] [--incremental]"
    echo ""
    echo "Modes:"
    echo "  full        Complete analysis from scratch (default)"
    echo "  incremental Update existing knowledge graph"
    echo "  components  Focus on React components only"
    echo "  hooks       Focus on React hooks only"
    echo "  stories     Focus on Storybook analysis only"
    echo "  maintenance Complete analysis + Storybook cleanup/maintenance"
    echo "  validation  Run validation only"
    echo ""
    echo "Options:"
    echo "  --validate    Run validation after analysis"
    echo "  --incremental Perform incremental updates only"
    echo ""
    echo "Examples:"
    echo "  $0 full --validate"
    echo "  $0 incremental"
    echo "  $0 components --validate"
    echo "  $0 maintenance --validate"
}

# Main execution
main() {
    local mode="full"
    local validate="false"
    local incremental="false"

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            full|incremental|components|hooks|stories|maintenance|validation)
                mode="$1"
                shift
                ;;
            --validate)
                validate="true"
                shift
                ;;
            --incremental)
                incremental="true"
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                error "Unknown argument: $1"
                usage
                exit 1
                ;;
        esac
    done

    # Run orchestration
    check_prerequisites
    orchestrate_analysis "$mode" "$validate" "$incremental"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi