{
  "analysis": {
    "timestamp": "2025-06-25T00:00:00Z",
    "repository": "tkr-portfolio",
    "analyzer": "Security Analysis Agent",
    "version": "1.0.0"
  },
  "summary": {
    "total_findings": 6,
    "critical": 0,
    "high": 2,
    "medium": 3,
    "low": 2,
    "risk_level": "MEDIUM",
    "security_score": 72
  },
  "findings": [
    {
      "id": "SEC-001",
      "title": "Server Configuration Exposes Overly Permissive CORS",
      "severity": "HIGH",
      "category": "configuration",
      "owasp_category": "A06:2021 - Vulnerable and Outdated Components",
      "cwe": "CWE-346",
      "file_path": "_project/repo-review/reports/server.js",
      "line_number": 79,
      "description": "The development server sets overly permissive CORS headers allowing any origin to make requests",
      "impact": "Potential CSRF attacks if server is used in production environment",
      "evidence": {
        "code_snippet": "'Access-Control-Allow-Origin': '*',\n'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n'Access-Control-Allow-Headers': 'Content-Type, Authorization'",
        "pattern": "CORS wildcard origin"
      },
      "remediation": {
        "description": "Configure CORS to only allow specific trusted origins",
        "code_example": "'Access-Control-Allow-Origin': process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://tuckertucker.github.io'",
        "effort": "LOW"
      },
      "cvss_score": 7.5,
      "exploitability": "MEDIUM",
      "references": [
        "https://owasp.org/www-community/attacks/CORS_OriginHeaderScrutiny"
      ]
    },
    {
      "id": "SEC-002",
      "title": "Path Traversal Vulnerability in File Server",
      "severity": "HIGH",
      "category": "input_validation",
      "owasp_category": "A01:2021 - Broken Access Control",
      "cwe": "CWE-22",
      "file_path": "_project/repo-review/reports/server.js",
      "line_number": 36,
      "description": "Direct path resolution without sanitization allows potential directory traversal attacks",
      "impact": "Unauthorized access to files outside the intended directory",
      "evidence": {
        "code_snippet": "const filePath = path.join(__dirname, pathname.substring(1));",
        "pattern": "Unsanitized path traversal"
      },
      "remediation": {
        "description": "Sanitize pathname and restrict access to safe directories",
        "code_example": "const sanitizedPath = path.normalize(pathname).replace(/^(\\.\\.[/\\\\])+/, '');\nconst filePath = path.join(__dirname, 'public', sanitizedPath);",
        "effort": "MEDIUM"
      },
      "cvss_score": 8.6,
      "exploitability": "HIGH",
      "references": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ]
    },
    {
      "id": "SEC-003",
      "title": "Dependency Vulnerability - brace-expansion",
      "severity": "MEDIUM",
      "category": "dependencies",
      "owasp_category": "A06:2021 - Vulnerable and Outdated Components",
      "cwe": "CWE-400",
      "file_path": "package-lock.json",
      "line_number": null,
      "description": "Low-severity ReDoS vulnerability in brace-expansion package",
      "impact": "Potential denial of service through regular expression complexity",
      "evidence": {
        "vulnerability_id": "GHSA-v6h2-p8h4-qcjw",
        "affected_versions": "1.0.0-1.1.11, 2.0.0-2.0.1",
        "current_version": "multiple"
      },
      "remediation": {
        "description": "Update vulnerable dependencies using npm audit fix",
        "code_example": "npm audit fix",
        "effort": "LOW"
      },
      "cvss_score": 3.1,
      "exploitability": "LOW",
      "references": [
        "https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"
      ]
    },
    {
      "id": "SEC-004",
      "title": "Bash Script Injection Risk",
      "severity": "MEDIUM",
      "category": "injection",
      "owasp_category": "A03:2021 - Injection",
      "cwe": "CWE-78",
      "file_path": "deploy-storybook",
      "line_number": 5,
      "description": "Potential command injection via git config in deployment script",
      "impact": "Arbitrary command execution if git configuration is compromised",
      "evidence": {
        "code_snippet": "REPO_URL=$(git config --get remote.origin.url)",
        "pattern": "Unvalidated command substitution"
      },
      "remediation": {
        "description": "Validate git repository URL format before use",
        "code_example": "if [[ ! \"$REPO_URL\" =~ ^https://github\\.com/ ]]; then\n    echo \"Invalid repository URL\"\n    exit 1\nfi",
        "effort": "LOW"
      },
      "cvss_score": 5.5,
      "exploitability": "MEDIUM",
      "references": [
        "https://owasp.org/www-community/attacks/Command_Injection"
      ]
    },
    {
      "id": "SEC-005",
      "title": "Insecure File Operations in Vite Plugin",
      "severity": "MEDIUM",
      "category": "file_handling",
      "owasp_category": "A01:2021 - Broken Access Control",
      "cwe": "CWE-22",
      "file_path": "vite.config.js",
      "line_number": 23,
      "description": "Recursive file copying without path validation in custom Vite plugin",
      "impact": "Potential copying of sensitive files if source directory is compromised",
      "evidence": {
        "code_snippet": "const copyRecursive = (src, dest) => {\n    const stat = fs.statSync(src)\n    // No validation of file paths\n}",
        "pattern": "Unvalidated file operations"
      },
      "remediation": {
        "description": "Add path validation and file type restrictions",
        "code_example": "// Validate source and destination paths\nif (!src.startsWith(srcDir) || !dest.startsWith(destDir)) {\n    throw new Error('Invalid file path');\n}",
        "effort": "MEDIUM"
      },
      "cvss_score": 4.3,
      "exploitability": "LOW",
      "references": [
        "https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload"
      ]
    },
    {
      "id": "SEC-006",
      "title": "Missing Security Headers",
      "severity": "LOW",
      "category": "configuration",
      "owasp_category": "A05:2021 - Security Misconfiguration",
      "cwe": "CWE-693",
      "file_path": "index.html",
      "line_number": null,
      "description": "No security headers configured for production deployment",
      "impact": "Increased risk of XSS, clickjacking, and other client-side attacks",
      "evidence": {
        "missing_headers": [
          "Content-Security-Policy",
          "X-Frame-Options",
          "X-Content-Type-Options",
          "Referrer-Policy"
        ]
      },
      "remediation": {
        "description": "Configure security headers in deployment setup",
        "code_example": "{\n  'Content-Security-Policy': \"default-src 'self'; img-src 'self' data:;\",\n  'X-Frame-Options': 'DENY',\n  'X-Content-Type-Options': 'nosniff'\n}",
        "effort": "LOW"
      },
      "cvss_score": 2.4,
      "exploitability": "LOW",
      "references": [
        "https://owasp.org/www-community/Security_Headers"
      ]
    }
  ],
  "data_protection": {
    "sensitive_data_found": false,
    "environment_variables": [],
    "secrets_detected": false,
    "data_classification": {
      "public": [
        "Portfolio content",
        "Project descriptions",
        "Public images and assets"
      ],
      "internal": [],
      "confidential": [],
      "restricted": []
    }
  },
  "authentication": {
    "required": false,
    "mechanisms": [],
    "session_management": "none",
    "findings": []
  },
  "dependencies": {
    "total_packages": 537,
    "vulnerable_packages": 1,
    "outdated_packages": 0,
    "license_issues": 0,
    "audit_summary": {
      "info": 0,
      "low": 1,
      "moderate": 0,
      "high": 0,
      "critical": 0
    }
  },
  "recommendations": {
    "immediate": [
      "Fix CORS configuration for production environment",
      "Implement path traversal protection in file server",
      "Update vulnerable dependencies with npm audit fix"
    ],
    "short_term": [
      "Add security headers to production deployment",
      "Validate input in deployment scripts",
      "Implement proper error handling and logging"
    ],
    "long_term": [
      "Set up automated security scanning in CI/CD",
      "Create security documentation and policies",
      "Regular security reviews and dependency updates"
    ]
  },
  "compliance": {
    "owasp_top_10": {
      "A01_broken_access_control": "MEDIUM",
      "A02_cryptographic_failures": "N/A",
      "A03_injection": "MEDIUM", 
      "A04_insecure_design": "LOW",
      "A05_security_misconfiguration": "MEDIUM",
      "A06_vulnerable_components": "MEDIUM",
      "A07_identification_failures": "N/A",
      "A08_software_integrity": "LOW",
      "A09_logging_monitoring": "LOW",
      "A10_server_side_forgery": "N/A"
    },
    "security_standards": [
      "CWE-22: Path Traversal",
      "CWE-78: Command Injection", 
      "CWE-346: Origin Validation Error",
      "CWE-400: Uncontrolled Resource Consumption",
      "CWE-693: Protection Mechanism Failure"
    ]
  }
}